name: Deploy WebApi to Yandex Cloud

on:
  push:
    branches: [stage]
  workflow_dispatch:

env:
  DOCKER_REGISTRY: cr.yandex
  DOCKER_REPOSITORY: crp0ua90hrat22e231l5
  IMAGE_NAME: chat-webapi
  SSH_HOST: greenspacegg.ru
  SSH_PORT: 228
  SSH_USER: gsdev
  SSH_PASSWORD: 123321q123321qQ
  KUBE_NAMESPACE: neva-friends

jobs:
  deploy-webapi:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y jq curl

      - name: Create Yandex Cloud service account key file
        run: |
          cat > key.json <<EOF
          {
          "id": "aje4es6i2a6bq97ckbp8",
          "service_account_id": "aje9nd57an4vhj4rbl5m",
          "private_key": "-----BEGIN PRIVATE KEY-----\nMIIEvgIBADANBgkqhkiG9w0BAQEFAASCBKgwggSkAgEAAoIBAQCjdmTiDvIQTc4y\nHhEFDMJvWX8YRfl8H5Rgh8BE8w2YdN99mnvWbnQPW5iKydOcY1SkH6PykdFAVDc9\ntTHyxgMLnpm4V37e68tJ1xq33KJ4PXxfDN2BNFw30eV8gYYYyoBsKpX/4IPvQABF\nEVovWctYBVa4K2w+Vnc2v3oEcDQvdWTAt5HPB44LDv/VRc4eUjNsGOBlvZmwOyGW\nLZ5L9WwGU9so36WkAFdUlIE9efzl7K4YU66XIMR6y7t2cj++Rnq5nrKBgKeoe2yV\nNiQ8Yg8/ijDm5LnzbHhIYvid2gVrewd8TSjJR99gwHp6StJZrYc4YAU1tTpn8U6j\n36PnNbOvAgMBAAECggEAEKDFN7m4JgXEKT+lu5MbXvhbqrxzhIzcgHVOubTVIo0W\nWaXoCF10BkaVszM/Xh6R8vVvrV09TANFG0yIqDQ8WxI8e47AToJDS7T1+CjEM4xi\n+nL0lWVzfA99/gxZomv3DwnF+HbTn6LYZC4/s6a5aLAiV4Ronm7CnG8d78BPjq7Y\n0ixuLqKJuAYJiCz/A3shdBCja9KECfxO9Udbsdyn2uNsVV6a8g8nH3koZlsrulen\nIZeK6dRbWx8Hwuq8G7NLsIre+7eWW2wAwpRg0mi9sMooEW9P5/7NFEqKNWm0rou7\nUgh366QZE668TET4NQdRm+LXFVOPUJ7EjxdLgo7BAQKBgQDK1/gT3IXHJix0VJPF\nbhGYHJeMtrxl0rz+9aFx0ibGIqnAP7LgCJLrWjwxJobUzrlEnIfiEYra+aa8zhWW\n2gMXm49hKrk0MpP5aoqAlpCa2Dmz1ABK68y1dXKYn/XwQNmLyBpCHJeF9M5jBhVu\n2nBFf9VH3KhNnxTN/52nbchL/QKBgQDOTH0fhOlKLMdznBe/jnr9cM6om1Iamrbu\nV5nboqa/m/YDbkjRQVZWHfgqA/ibLmsPoYe8Fcr2BG6csEDYKHwJrV9pqXiF+1fT\nrpG0LkHi1ZrmgqJvxe7S4mp+TdFDVtoJ68JJ2EJlNMJfvD/dyc4AD9IZzwQlJh50\nOyZXO2NwGwKBgQCjgUDj6Z8gL2IoB0DyJM4j2fBDKc1lGmDj92VClU5R6gEBCZeL\nRP4AnkTkrZSDl3r5ll9l2BQgfJptmIUIiwVxEyCZB1IwhBCJPNsV2cgIOQESNnJh\n8f6ZymksI8yf8/Yn2Y1o+xkcjn+KjI3cRFG5g9iMy44Su4eOoVwYaMLKlQKBgQDJ\nig4e8cDbdx2vQwosWKys1jz+mSa/2O/nrusfmCohPOM9fMtkqtkGrqaXnWONbu6m\nyZ6KUBwE9lV9e+8NfZeX+Kki165n7iFiKsQra5lwWk/G7E52tb7YhNuW4r0SdVHz\nqUAY1k4fA0j1MDqQmStIAiy2i/i3tiLAWFzfkaRWiwKBgCwdxCxzhmMSM4IUkmJY\n4MF7g6Dx2sAw+LU0a3FkeaYghZwDeXjWXATR7UFaNOnTkapQdIzJli9yZEvq+oGg\nHFAn50jYdSLNSc7nuz1kX6tclIH0BPmRe0nsYi60eF6RXLENPkT8KPZSXwFXdJWg\n8y1WLo7MzQWwlHeFw5gpal6A\n-----END PRIVATE KEY-----"
          }
          EOF

      - name: Get IAM token from service account key
        id: get-token
        run: |
          IAM_TOKEN=$(curl -s -X POST \
          -H "Content-Type: application/json" \
          -d @key.json \
          https://iam.api.cloud.yandex.net/iam/v1/tokens | jq -r .iamToken)
          echo "::add-mask::$IAM_TOKEN"
          echo "IAM_TOKEN=$IAM_TOKEN" >> $GITHUB_ENV
          echo "iam_token=$IAM_TOKEN" >> $GITHUB_OUTPUT
          
          # Debug: Check token length
          echo "Token length: ${#IAM_TOKEN}"
          echo "Token starts with: ${IAM_TOKEN:0:10}..."

      - name: Login to Yandex Docker registry
        run: |
          echo "${{ steps.get-token.outputs.iam_token }}" | docker login --username iam --password-stdin ${{ env.DOCKER_REGISTRY }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push WebApi Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Chat/External/WebApi/Dockerfile
          push: true
          tags: ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_REPOSITORY }}/${{ env.IMAGE_NAME }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Copy manifests to remote server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ env.SSH_HOST }}
          port: ${{ env.SSH_PORT }}
          username: ${{ env.SSH_USER }}
          password: ${{ env.SSH_PASSWORD }}
          source: "manifests/"
          target: "~/"

      - name: Copy service account key to remote server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ env.SSH_HOST }}
          port: ${{ env.SSH_PORT }}
          username: ${{ env.SSH_USER }}
          password: ${{ env.SSH_PASSWORD }}
          source: "key.json"
          target: "~/"

      - name: Deploy to Kubernetes via SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ env.SSH_HOST }}
          port: ${{ env.SSH_PORT }}
          username: ${{ env.SSH_USER }}
          password: ${{ env.SSH_PASSWORD }}
          script: |
            # Install jq if not available
            if ! command -v jq &> /dev/null; then
              echo "Installing jq..."
              sudo apt-get update && sudo apt-get install -y jq
            fi
            
            # Get IAM token on remote server
            IAM_TOKEN=$(curl -s -X POST \
            -H "Content-Type: application/json" \
            -d @~/key.json \
            https://iam.api.cloud.yandex.net/iam/v1/tokens | jq -r .iamToken)
            
            # Debug: Check if IAM token is available
            if [ -z "$IAM_TOKEN" ]; then
              echo "ERROR: Failed to get IAM_TOKEN"
              exit 1
            else
              echo "IAM_TOKEN obtained successfully (length: ${#IAM_TOKEN})"
            fi
            
            # Login to Yandex Container Registry
            echo "$IAM_TOKEN" | docker login --username iam --password-stdin ${{ env.DOCKER_REGISTRY }}
            
            # Pull latest image
            docker pull ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_REPOSITORY }}/${{ env.IMAGE_NAME }}:latest
            
            # Apply Kubernetes deployment
            kubectl apply -f ~/manifests/deployment.yaml -n ${{ env.KUBE_NAMESPACE }}
            
            # Restart deployment to ensure new image is used
            kubectl rollout restart deployment/chat-webapi -n ${{ env.KUBE_NAMESPACE }}
            
            # Wait for rollout to complete
            kubectl rollout status deployment/chat-webapi -n ${{ env.KUBE_NAMESPACE }} --timeout=300s
            
            # Verify deployment
            kubectl get pods -n ${{ env.KUBE_NAMESPACE }} -l app=chat-webapi
            kubectl get services -n ${{ env.KUBE_NAMESPACE }} -l app=chat-webapi

      - name: Health check
        run: |
          echo "Waiting for deployment to be ready..."
          sleep 30
          
          # Basic health check
          curl -f http://${{ env.SSH_HOST }}/health || echo "Health check failed, but deployment might still be starting up"
