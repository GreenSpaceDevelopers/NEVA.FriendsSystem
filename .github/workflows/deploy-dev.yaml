name: Deploy WebApi to Yandex Cloud

on:
  push:
    branches: [stage]
  workflow_dispatch:

env:
  DOCKER_REGISTRY: cr.yandex
  DOCKER_REPOSITORY: crp0ua90hrat22e231l5
  IMAGE_NAME: chat-webapi
  SSH_HOST: greenspacegg.ru
  SSH_PORT: 228
  SSH_USER: gsdev
  SSH_PASSWORD: 123321q123321qQ
  KUBE_NAMESPACE: neva-friends

jobs:
  deploy-webapi:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y jq curl

      - name: Yandex Cloud CR "Login" Action for GitHub Actions
        uses: yc-actions/yc-cr-login@v0.1-alpha
        with:
          yc-sa-json-credentials: ${{ secrets.YC_SA_KEY_JSON }}
#      - name: Auth to Yandex Container Registry
#        run: |
#  
#          IAM_TOKEN=$(curl -sf -X POST \
#          -H 'Content-Type: application/json' \
#          -d "${{ secrets.YC_SA_KEY_JSON }}" \
#          https://iam.api.cloud.yandex.net/iam/v1/tokens | jq -r .iamToken)
#          
#          echo "$IAM_TOKEN" | docker login --username oauth --password-stdin cr.yandex

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push WebApi Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Chat/External/WebApi/Dockerfile
          push: true
          tags: ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_REPOSITORY }}/${{ env.IMAGE_NAME }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Copy manifests to remote server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ env.SSH_HOST }}
          port: ${{ env.SSH_PORT }}
          username: ${{ env.SSH_USER }}
          password: ${{ env.SSH_PASSWORD }}
          source: "manifests/"
          target: "~/"

      - name: Deploy to Kubernetes via SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ env.SSH_HOST }}
          port: ${{ env.SSH_PORT }}
          username: ${{ env.SSH_USER }}
          password: ${{ env.SSH_PASSWORD }}
          script: |
            
            # Pull latest image
            docker pull ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_REPOSITORY }}/${{ env.IMAGE_NAME }}:latest
            
            # Apply Kubernetes deployment
            kubectl apply -f ~/manifests/deployment.yaml -n ${{ env.KUBE_NAMESPACE }}
            
            # Restart deployment to ensure new image is used
            kubectl rollout restart deployment/chat-webapi -n ${{ env.KUBE_NAMESPACE }}
            
            # Wait for rollout to complete
            kubectl rollout status deployment/chat-webapi -n ${{ env.KUBE_NAMESPACE }} --timeout=300s
            
            # Verify deployment
            kubectl get pods -n ${{ env.KUBE_NAMESPACE }} -l app=chat-webapi
            kubectl get services -n ${{ env.KUBE_NAMESPACE }} -l app=chat-webapi
