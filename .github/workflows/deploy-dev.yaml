name: Deploy WebApi to Yandex Cloud

on:
  push:
    branches: [stage]
  workflow_dispatch:

env:
  DOCKER_REGISTRY: cr.yandex
  DOCKER_REPOSITORY: crp0ua90hrat22e231l5
  IMAGE_NAME: chat-webapi
  SSH_HOST: greenspacegg.ru
  SSH_PORT: 228
  SSH_USER: gsdev
  SSH_PASSWORD: 123321q123321qQ
  KUBE_NAMESPACE: neva-friends

jobs:
  deploy-webapi:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y jq curl

      - name: Set up Docker auth for Yandex Container Registry
        run: |
          echo "${{ secrets.YC_SA_KEY_JSON }}" > key.json
          
          export IAM_TOKEN=$(curl -s -X POST \
          -H "Content-Type: application/json" \
          -d @"key.json" \
          https://iam.api.cloud.yandex.net/iam/v1/tokens | jq -r .iamToken)
          
          echo $IAM_TOKEN | docker login \
          --username oauth \
          --password-stdin cr.yandex

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push WebApi Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Chat/External/WebApi/Dockerfile
          push: true
          tags: ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_REPOSITORY }}/${{ env.IMAGE_NAME }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Copy manifests to remote server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ env.SSH_HOST }}
          port: ${{ env.SSH_PORT }}
          username: ${{ env.SSH_USER }}
          password: ${{ env.SSH_PASSWORD }}
          source: "manifests/"
          target: "~/"

      - name: Deploy to Kubernetes via SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ env.SSH_HOST }}
          port: ${{ env.SSH_PORT }}
          username: ${{ env.SSH_USER }}
          password: ${{ env.SSH_PASSWORD }}
          script: |
            # Install jq if not available
            if ! command -v jq &> /dev/null; then
              echo "Installing jq..."
              sudo apt-get update && sudo apt-get install -y jq
            fi
            
            # Get IAM token on remote server
            IAM_TOKEN=$(curl -s -X POST \
            -H "Content-Type: application/json" \
            -d @~/key.json \
            https://iam.api.cloud.yandex.net/iam/v1/tokens | jq -r .iamToken)
            
            # Debug: Check if IAM token is available
            if [ -z "$IAM_TOKEN" ]; then
              echo "ERROR: Failed to get IAM_TOKEN"
              exit 1
            else
              echo "IAM_TOKEN obtained successfully (length: ${#IAM_TOKEN})"
            fi
            
            # Login to Yandex Container Registry
            echo "$IAM_TOKEN" | docker login --username iam --password-stdin ${{ env.DOCKER_REGISTRY }}
            
            # Pull latest image
            docker pull ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_REPOSITORY }}/${{ env.IMAGE_NAME }}:latest
            
            # Apply Kubernetes deployment
            kubectl apply -f ~/manifests/deployment.yaml -n ${{ env.KUBE_NAMESPACE }}
            
            # Restart deployment to ensure new image is used
            kubectl rollout restart deployment/chat-webapi -n ${{ env.KUBE_NAMESPACE }}
            
            # Wait for rollout to complete
            kubectl rollout status deployment/chat-webapi -n ${{ env.KUBE_NAMESPACE }} --timeout=300s
            
            # Verify deployment
            kubectl get pods -n ${{ env.KUBE_NAMESPACE }} -l app=chat-webapi
            kubectl get services -n ${{ env.KUBE_NAMESPACE }} -l app=chat-webapi

      - name: Health check
        run: |
          echo "Waiting for deployment to be ready..."
          sleep 30
          
          # Basic health check
          curl -f http://${{ env.SSH_HOST }}/health || echo "Health check failed, but deployment might still be starting up"
