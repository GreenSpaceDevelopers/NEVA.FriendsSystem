// <auto-generated />
using System;
using Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(ChatsDbContext))]
    [Migration("20250630102402_AddNotificationSettings")]
    partial class AddNotificationSettings
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ChatChatUser", b =>
                {
                    b.Property<Guid>("ChatsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UsersId")
                        .HasColumnType("uuid");

                    b.HasKey("ChatsId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("ChatUserChats", (string)null);
                });

            modelBuilder.Entity("ChatUserChatUser", b =>
                {
                    b.Property<Guid>("ChatUserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FriendsId")
                        .HasColumnType("uuid");

                    b.HasKey("ChatUserId", "FriendsId");

                    b.HasIndex("FriendsId");

                    b.ToTable("UserFriends", (string)null);
                });

            modelBuilder.Entity("ChatUserChatUser1", b =>
                {
                    b.Property<Guid>("FriendRequestsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("WaitingFriendRequestsId")
                        .HasColumnType("uuid");

                    b.HasKey("FriendRequestsId", "WaitingFriendRequestsId");

                    b.HasIndex("WaitingFriendRequestsId");

                    b.ToTable("FriendRequests", (string)null);
                });

            modelBuilder.Entity("ChatUserChatUser2", b =>
                {
                    b.Property<Guid>("BlockedUsersId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ChatUser1Id")
                        .HasColumnType("uuid");

                    b.HasKey("BlockedUsersId", "ChatUser1Id");

                    b.HasIndex("ChatUser1Id");

                    b.ToTable("UserBlockedUsers", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Blog.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AttachmentId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("ParentCommentId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ParentId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PostId")
                        .HasColumnType("uuid");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AttachmentId");

                    b.HasIndex("AuthorId");

                    b.HasIndex("ParentId");

                    b.HasIndex("PostId");

                    b.ToTable("Comment");
                });

            modelBuilder.Entity("Domain.Models.Blog.Post", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AttachmentId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsCommentsEnabled")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPinned")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRepost")
                        .HasColumnType("boolean");

                    b.Property<Guid>("OriginalPostId")
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AttachmentId");

                    b.HasIndex("AuthorId");

                    b.HasIndex("OriginalPostId");

                    b.ToTable("Post");
                });

            modelBuilder.Entity("Domain.Models.Media.Picture", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("Domain.Models.Messaging.Attachment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("TypeId")
                        .HasColumnType("uuid");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("TypeId");

                    b.ToTable("Attachments");
                });

            modelBuilder.Entity("Domain.Models.Messaging.AttachmentType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Extension")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("AttachmentTypes");
                });

            modelBuilder.Entity("Domain.Models.Messaging.Chat", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AdminId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ChatPictureId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LastMessageDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("RelatedEventId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AdminId");

                    b.HasIndex("ChatPictureId");

                    b.HasIndex("RelatedEventId");

                    b.ToTable("Chats");
                });

            modelBuilder.Entity("Domain.Models.Messaging.CommentReaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CommentId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ReactionTypeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ReactorId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CommentId");

                    b.HasIndex("ReactionTypeId");

                    b.HasIndex("ReactorId");

                    b.ToTable("CommentReaction");
                });

            modelBuilder.Entity("Domain.Models.Messaging.Message", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AttachmentId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ChatId")
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("MessageId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SenderId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AttachmentId");

                    b.HasIndex("ChatId");

                    b.HasIndex("MessageId");

                    b.HasIndex("SenderId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("Domain.Models.Messaging.PostReaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("PostId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ReactionTypeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ReactorId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.HasIndex("ReactionTypeId");

                    b.HasIndex("ReactorId");

                    b.ToTable("PostReaction");
                });

            modelBuilder.Entity("Domain.Models.Messaging.Reaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CommentId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MessageId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ReactorId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TypeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CommentId");

                    b.HasIndex("MessageId");

                    b.HasIndex("ReactorId");

                    b.HasIndex("TypeId");

                    b.ToTable("Reactions");
                });

            modelBuilder.Entity("Domain.Models.Messaging.ReactionType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AttachmentId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("IconId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AttachmentId");

                    b.ToTable("ReactionTypes");
                });

            modelBuilder.Entity("Domain.Models.Service.Event", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("Domain.Models.Service.NotificationSettings", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("AdminRoleAssigned")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEmailEnabled")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPushEnabled")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTelegramEnabled")
                        .HasColumnType("boolean");

                    b.Property<bool>("NewCommentReaction")
                        .HasColumnType("boolean");

                    b.Property<bool>("NewCommentReply")
                        .HasColumnType("boolean");

                    b.Property<bool>("NewFriendRequest")
                        .HasColumnType("boolean");

                    b.Property<bool>("NewMessage")
                        .HasColumnType("boolean");

                    b.Property<bool>("NewPostComment")
                        .HasColumnType("boolean");

                    b.Property<bool>("NewTournamentPosts")
                        .HasColumnType("boolean");

                    b.Property<bool>("NewTournamentStep")
                        .HasColumnType("boolean");

                    b.Property<bool>("TeamChanged")
                        .HasColumnType("boolean");

                    b.Property<bool>("TeamInvites")
                        .HasColumnType("boolean");

                    b.Property<bool>("TournamentInvites")
                        .HasColumnType("boolean");

                    b.Property<bool>("TournamentLobbyInvites")
                        .HasColumnType("boolean");

                    b.Property<bool>("TournamentStarted")
                        .HasColumnType("boolean");

                    b.Property<bool>("TournamentTeamInvites")
                        .HasColumnType("boolean");

                    b.Property<bool>("TournamentUpdates")
                        .HasColumnType("boolean");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("NotificationSettings");
                });

            modelBuilder.Entity("Domain.Models.Users.AspNetUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ChatUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ChatUserId")
                        .IsUnique();

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUser");
                });

            modelBuilder.Entity("Domain.Models.Users.ChatRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ChatRoles");
                });

            modelBuilder.Entity("Domain.Models.Users.ChatUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AvatarId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CoverId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("LastSeen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("MiddleName")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<Guid>("NotificationSettingsId")
                        .HasColumnType("uuid");

                    b.Property<string>("Surname")
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AvatarId");

                    b.HasIndex("CoverId");

                    b.ToTable("ChatUsers");
                });

            modelBuilder.Entity("Domain.Models.Users.PrivacySetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid>("ChatUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("SettingName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ChatUserId")
                        .IsUnique();

                    b.ToTable("PrivacySettings");
                });

            modelBuilder.Entity("ChatChatUser", b =>
                {
                    b.HasOne("Domain.Models.Messaging.Chat", null)
                        .WithMany()
                        .HasForeignKey("ChatsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Users.ChatUser", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ChatUserChatUser", b =>
                {
                    b.HasOne("Domain.Models.Users.ChatUser", null)
                        .WithMany()
                        .HasForeignKey("ChatUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Users.ChatUser", null)
                        .WithMany()
                        .HasForeignKey("FriendsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ChatUserChatUser1", b =>
                {
                    b.HasOne("Domain.Models.Users.ChatUser", null)
                        .WithMany()
                        .HasForeignKey("FriendRequestsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Users.ChatUser", null)
                        .WithMany()
                        .HasForeignKey("WaitingFriendRequestsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ChatUserChatUser2", b =>
                {
                    b.HasOne("Domain.Models.Users.ChatUser", null)
                        .WithMany()
                        .HasForeignKey("BlockedUsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Users.ChatUser", null)
                        .WithMany()
                        .HasForeignKey("ChatUser1Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Models.Blog.Comment", b =>
                {
                    b.HasOne("Domain.Models.Messaging.Attachment", "Attachment")
                        .WithMany()
                        .HasForeignKey("AttachmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Users.ChatUser", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Blog.Comment", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Blog.Post", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Attachment");

                    b.Navigation("Author");

                    b.Navigation("Parent");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("Domain.Models.Blog.Post", b =>
                {
                    b.HasOne("Domain.Models.Messaging.Attachment", "Attachment")
                        .WithMany()
                        .HasForeignKey("AttachmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Users.ChatUser", "Author")
                        .WithMany("Posts")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Blog.Post", "OriginalPost")
                        .WithMany()
                        .HasForeignKey("OriginalPostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Attachment");

                    b.Navigation("Author");

                    b.Navigation("OriginalPost");
                });

            modelBuilder.Entity("Domain.Models.Messaging.Attachment", b =>
                {
                    b.HasOne("Domain.Models.Messaging.AttachmentType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Type");
                });

            modelBuilder.Entity("Domain.Models.Messaging.Chat", b =>
                {
                    b.HasOne("Domain.Models.Users.ChatUser", "Admin")
                        .WithMany()
                        .HasForeignKey("AdminId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Models.Media.Picture", "ChatPicture")
                        .WithMany()
                        .HasForeignKey("ChatPictureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Service.Event", "RelatedEvent")
                        .WithMany()
                        .HasForeignKey("RelatedEventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Admin");

                    b.Navigation("ChatPicture");

                    b.Navigation("RelatedEvent");
                });

            modelBuilder.Entity("Domain.Models.Messaging.CommentReaction", b =>
                {
                    b.HasOne("Domain.Models.Blog.Comment", "Comment")
                        .WithMany("CommentReactions")
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Messaging.ReactionType", "ReactionType")
                        .WithMany()
                        .HasForeignKey("ReactionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Users.ChatUser", "Reactor")
                        .WithMany()
                        .HasForeignKey("ReactorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Comment");

                    b.Navigation("ReactionType");

                    b.Navigation("Reactor");
                });

            modelBuilder.Entity("Domain.Models.Messaging.Message", b =>
                {
                    b.HasOne("Domain.Models.Messaging.Attachment", "Attachment")
                        .WithMany()
                        .HasForeignKey("AttachmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Messaging.Chat", "Chat")
                        .WithMany("Messages")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Messaging.Message", null)
                        .WithMany("Replies")
                        .HasForeignKey("MessageId");

                    b.HasOne("Domain.Models.Users.ChatUser", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Attachment");

                    b.Navigation("Chat");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("Domain.Models.Messaging.PostReaction", b =>
                {
                    b.HasOne("Domain.Models.Blog.Post", "Post")
                        .WithMany("Reactions")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Messaging.ReactionType", "ReactionType")
                        .WithMany()
                        .HasForeignKey("ReactionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Users.ChatUser", "Reactor")
                        .WithMany()
                        .HasForeignKey("ReactorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("ReactionType");

                    b.Navigation("Reactor");
                });

            modelBuilder.Entity("Domain.Models.Messaging.Reaction", b =>
                {
                    b.HasOne("Domain.Models.Blog.Comment", null)
                        .WithMany("Reactions")
                        .HasForeignKey("CommentId");

                    b.HasOne("Domain.Models.Messaging.Message", "Message")
                        .WithMany("Reactions")
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Users.ChatUser", "Reactor")
                        .WithMany()
                        .HasForeignKey("ReactorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Messaging.ReactionType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Message");

                    b.Navigation("Reactor");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("Domain.Models.Messaging.ReactionType", b =>
                {
                    b.HasOne("Domain.Models.Messaging.Attachment", "Attachment")
                        .WithMany()
                        .HasForeignKey("AttachmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Attachment");
                });

            modelBuilder.Entity("Domain.Models.Service.NotificationSettings", b =>
                {
                    b.HasOne("Domain.Models.Users.ChatUser", "User")
                        .WithOne("NotificationSettings")
                        .HasForeignKey("Domain.Models.Service.NotificationSettings", "UserId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Models.Users.AspNetUser", b =>
                {
                    b.HasOne("Domain.Models.Users.ChatUser", null)
                        .WithOne("AspNetUser")
                        .HasForeignKey("Domain.Models.Users.AspNetUser", "ChatUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Users.ChatRole", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Domain.Models.Users.ChatUser", b =>
                {
                    b.HasOne("Domain.Models.Messaging.Attachment", "Avatar")
                        .WithMany()
                        .HasForeignKey("AvatarId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Domain.Models.Messaging.Attachment", "Cover")
                        .WithMany()
                        .HasForeignKey("CoverId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Avatar");

                    b.Navigation("Cover");
                });

            modelBuilder.Entity("Domain.Models.Users.PrivacySetting", b =>
                {
                    b.HasOne("Domain.Models.Users.ChatUser", null)
                        .WithOne("PrivacySetting")
                        .HasForeignKey("Domain.Models.Users.PrivacySetting", "ChatUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Models.Blog.Comment", b =>
                {
                    b.Navigation("CommentReactions");

                    b.Navigation("Reactions");
                });

            modelBuilder.Entity("Domain.Models.Blog.Post", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Reactions");
                });

            modelBuilder.Entity("Domain.Models.Messaging.Chat", b =>
                {
                    b.Navigation("Messages");
                });

            modelBuilder.Entity("Domain.Models.Messaging.Message", b =>
                {
                    b.Navigation("Reactions");

                    b.Navigation("Replies");
                });

            modelBuilder.Entity("Domain.Models.Users.ChatUser", b =>
                {
                    b.Navigation("AspNetUser")
                        .IsRequired();

                    b.Navigation("NotificationSettings")
                        .IsRequired();

                    b.Navigation("Posts");

                    b.Navigation("PrivacySetting")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
